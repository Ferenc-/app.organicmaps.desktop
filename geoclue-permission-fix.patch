diff --git a/platform/qt_location_service.cpp b/platform/qt_location_service.cpp
index d790efba91..1f8be60afe 100644
--- a/platform/qt_location_service.cpp
+++ b/platform/qt_location_service.cpp
@@ -110,20 +110,30 @@ void QtLocationService::OnLocationUpdate(QGeoPositionInfo const & info)
   auto const & coordinate = info.coordinate();
   LOG(LDEBUG, ("Location updated with valid coordinates:", coordinate.longitude(), coordinate.latitude()));
   m_observer.OnLocationUpdated(gpsInfoFromQGeoPositionInfo(info, qStringToTLocationSource(m_positionSource->sourceName())));
+  if (!m_clientIsActive)
+  {
+    m_clientIsActive = true;
+    m_positionSource->startUpdates();
+  }
 }
 
 void QtLocationService::OnErrorOccurred(QGeoPositionInfoSource::Error positioningError)
 {
   LOG(LWARNING, ("Location error occured QGeoPositionInfoSource::Error code:", positioningError));
+  m_clientIsActive = false;
   m_observer.OnLocationError(tLocationErrorFromQGeoPositionInfoError(positioningError));
 }
 
 void QtLocationService::OnSupportedPositioningMethodsChanged()
 {
-  LOG(LWARNING, ("Supported Positioning Method changed:", m_positionSource->sourceName().toStdString()));
-  // In certain cases propagating GPSIsOff would make sense,
-  // but this signal can also mean GPSISOn ... or something entirely different.
-  // m_observer.OnLocationError(location::TLocationError::EGPSIsOff);
+  auto positioningMethods = m_positionSource->supportedPositioningMethods();
+  LOG(LDEBUG, ("Supported Positioning Method changed for:", m_positionSource->sourceName().toStdString(),
+	       "to:", positioningMethods));
+  if (positioningMethods == QGeoPositionInfoSource::NoPositioningMethods)
+  {
+    m_clientIsActive = false;
+    m_observer.OnLocationError(location::TLocationError::EGPSIsOff);
+  }
 }
 
 void QtLocationService::Start()
@@ -131,15 +141,13 @@ void QtLocationService::Start()
   if (m_positionSource)
   {
     LOG(LDEBUG, ("Starting Updates from:", m_positionSource->sourceName().toStdString()));
-    m_positionSource->startUpdates();
-    QGeoPositionInfo info = m_positionSource->lastKnownPosition();
-    m_positionSource->requestUpdate();
+    m_positionSource->requestUpdate(1800000);
   }
 }
 
 void QtLocationService::Stop()
 {
-  if (m_positionSource)
+  if (m_positionSource && m_clientIsActive)
   {
     LOG(LDEBUG, ("Stopping Updates from:", m_positionSource->sourceName().toStdString()));
     m_positionSource->stopUpdates();
diff --git a/platform/qt_location_service.hpp b/platform/qt_location_service.hpp
index 7d12bae4c5..66de652ea1 100644
--- a/platform/qt_location_service.hpp
+++ b/platform/qt_location_service.hpp
@@ -8,6 +8,12 @@ class QtLocationService : public QObject, public location::LocationService
 {
   Q_OBJECT
   QGeoPositionInfoSource *m_positionSource;
+  // Unfortunately when the source is `geoclue2`
+  // we would need access to the `Active` D-Bus property
+  // https://www.freedesktop.org/software/geoclue/docs
+  // /gdbus-org.freedesktop.GeoClue2.Client.html#gdbus-property-org-freedesktop-GeoClue2-Client.Active
+  // But `QGeoPositionInfoSource` doesn't expose that so we have to deduce its state.
+  bool m_clientIsActive;
 
 public:
   explicit QtLocationService(location::LocationObserver &, std::string const &);
